import kenlm,sys
import numpy as np


#the goal of this script is to take in a gen.txt file generated by ngram LM, then select the most gibberish ones, and write it out again. the result can be directly used as a data file in building the neg data.

def select_gibberish(generated_sents,model):
    #given a list of sents, compute their loglik and select half bottom ones
    d=dict()
    for sent in generated_sents:
        d[sent]=model.score(sent)/np.log2(len(sent)+1)
    sorted_sents=sorted(d, key=d.__getitem__)
    return sorted_sents[:int(0.5*len(generated_sents))]

def select_better(generated_sents,model):
    #given a list of sents, compute their loglik and select half bottom ones
    d=dict()
    for sent in generated_sents:
        d[sent]=model.score(sent)/np.log2(len(sent)+1)
    sorted_sents=sorted(d, key=d.__getitem__)
    return sorted_sents[int(0.5*len(generated_sents)):]

def serialize(output,fn):
    g=open(fn,'w')
    g.write(output)
    g.close()


def build_gibberish_data(generated_file,mode):
    model=kenlm.LanguageModel('train3.lm')
    f=open(generated_file,'r').read().split('\n')
    f=[i for i in f if i!='']
    if mode=='-g':
        gibberish=select_gibberish(f,model)
        output='\n'.join(gibberish)
        serialize(output,'gibberish.txt')
    if mode=='-b':
        better=select_better(f,model)
        output='\n'.join(better)
        serialize(output,'better_sents.txt')




def main():
    modes={'-g':'serializing gibberish...','-b':'serializing better_sentences...'}
    mode=sys.argv[1]
    print('mode:',modes[mode])
    build_gibberish_data('gen.txt',mode)
    

if __name__ == '__main__':
    main()

